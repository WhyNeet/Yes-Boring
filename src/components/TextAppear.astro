---
interface Props {
  classList?: string;
}

const { classList = "" } = Astro.props;
---

<text-appear>
  <div class={classList}>
    <slot />
  </div>
</text-appear>

<script>
  class Props extends HTMLElement {
    connectedCallback() {
      const element = this.children[0] as HTMLElement;
      const parent = this.parentElement as HTMLElement;

      run(element, parent);
    }
  }

  function run(element: HTMLElement, root: HTMLElement) {
    const activeColors = ["#fcc800", "#fb2c36", "#00a6f4", "#00d492"];

    const pickActiveColor = () => {
      return activeColors[Math.round(Math.random() * (activeColors.length - 1))];
    };

    const { height, top } = root.getBoundingClientRect();
    const { height: elementHeight } = element.getBoundingClientRect();
    const span = height - elementHeight;
    const start = top + window.scrollY;

    window.addEventListener("scroll", () => {
      // progress = (current scroll - start height) / scroll area
      const progressRaw =
        (window.scrollY - start) / span;
      if (progressRaw <= 0) {
        for (const element of elements) {
          element.style.opacity = "0.4";
          element.style.color = "";
        }
        return;
      }
      const progress = Math.min(Math.max(progressRaw, 0), 1);
      const index = Math.floor(progress * (elements.length - 1));

      for (let i = 0; i < elements.length; i++) {
        if (i < index) {
          elements[i].style.color = "";
          elements[i].style.opacity = "1.0";
        } else if (i > index) {
          elements[i].style.opacity = "0.4";
          elements[i].style.color = "";
        }
      }

      if (elements[index].style.color === "") elements[index].style.color = pickActiveColor();
      elements[index].style.opacity = "1.0";
    });

    const words = element.innerText.split(" ");
    const elements = words.map((word) => {
      const node = document.createElement("span");
      node.style.opacity = "0.4";
      node.innerText = word + " ";
      return node;
    });
    element.innerHTML = "";
    const parent = document.createElement("p");
    element.appendChild(parent);
    for (const node of elements) {
      parent.appendChild(node);
    }
  }

  customElements.define("text-appear", Props);
</script>
